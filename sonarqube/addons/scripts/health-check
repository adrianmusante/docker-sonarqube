#!/bin/bash
set -eo pipefail

_help() {
  local _bin="${0##*/}"
  cat 1>&2 <<MSG
Utility to check if SonarQube is healthy.

Usage: $_bin [options] ...
Some of the options include:
    -u <HEALTH_CHECK_URL>       URL used to check the status of SonarQube. (Optional)

    -s <STATUS>                 Repeat this option to add more valid status. Possible status:
                                  - STARTING: Server initialization is ongoing
                                  - UP: SonarQube instance is up and running
                                  - DOWN: Instance is up but not running (e.g., due to migration failure)
                                  - RESTARTING: Restart has been requested
                                  - DB_MIGRATION_NEEDED: Database migration required
                                  - DB_MIGRATION_RUNNING: Database migration in progress

    -h                          display this help and exit

Example:
    - $_bin -u http://my-host:9000/api/system/status
    - $_bin -s STARTING -s RESTARTING

MSG
  exit 2
}

regex_in() {
  echo "^($(printf '%s\n' "$@" | tr ' ' '\n' | tr ',' '\n' | tr ';' '\n' | grep . | tr -d ' ' | tr '\n' '|' | rev | cut -d '|' -f2- | rev))\$"
}

declare -a statuses=(UP)
health_check_url=""
while getopts u:s:h opt; do
  case $opt in
    u) health_check_url="$OPTARG" ;;
    s) statuses+=("$OPTARG");;
    *) _help ;;
    #...
  esac
done

if [ -z "$health_check_url" ]; then
  . "$ADDONS_HOME/scripts/sonarqube-env.sh"
  health_check_url="$SONARQUBE_API_URL/system/status"
fi

result="$(curl -sSfL "$health_check_url" || true)"
if [ -z "${result:-}" ]; then
  echo "Couldn't connect to $health_check_url" 1>&2
  exit 1
fi

echo "$result"
status="$(echo "$result" | json_pp 2>/dev/null | grep '"status"' | cut -d '"' -f4 | tr -d '\\n')"
grep -qE "$(regex_in "${statuses[@]}")" <(echo "$status")